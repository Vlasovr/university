Для использования строковых функций вам потребуется подключить к 
программе соответствующие стандартные заголовки. Это string.h для 
всех функций, кроме sprintf и sscanf, определенных в stdio.h и 
функций преобразования, определенных в stdlib.h.

В С++ вместо вышеупомянутых заголовочных файлов следует подключать 
cstring, cstdio и cstdlib соответственно. 
//------------------------------------------------------------------
СРАВНЕНИЕ СТРОК
Первая сравнивает строки с учетом регистра, вторая – без:

  int stricmp(const char *string1, const char *string2);
  int strcmp(const char *string1, const char *string2);

Обе функции возвращают число меньшее 0, если первая строка меньше 
второй, большее нуля если первая строка больше второй и 0, если 
строки лексикографически равны. 

//------------------------------------------------------------------
ВЫЧИСЛЕНИЕ ДЛИНЫ СТРОКИ
Для вычисления длины строки используется функция 

   strlen(const char *string);

Функция возвращает длину строки, не включая нуль-терминатор. Как 
всегда, следите за тем, чтобы в выделенной под string памяти все же 
нашелся такой символ. В противном случае функция выйдет за пределы 
выделенной памяти и все будет плохо.
//------------------------------------------------------------------
ВВОД СТРОКИ
Функция gets() позволяет читать строку символов при вводе с 
клавиатуры и записывает ее в память по адресу, на который указывает 
аргумент. 

   gets(char *str);

//------------------------------------------------------------------
ПРЕОБРАЗОВАНИЯ ЧИСЛА В СТРОКУ И ОБРАТНО
Зачастую требуется преобразовать число в строку и наоборот. Можно 
использовать функции sprintf и sscanf. Например, так:

   char str[50];  
   int i=15;
   int j;
   sprintf(str, "%d", i); // Записать в str строковое представление i
   sscanf(str, "%d", &j); // Записать в j число, содержащееся в строке str
   sprintf(str, "i=%d and j=%d", i, j);
   //содержимое str: "i=15 and j=15"

Кроме того доступно целое семейство функций atof, atoi, atol и itoa, 
ltoa. Все они очень похоже между собой. Функции из первой группы 
преобразуют строку в число (float, int или long) в зависимости от 
окончания. Функции из второй группы выполняют обратное преобразование.
Должен заметить, что функции из второй группы (равно как и ранее 
упомянутая stricmp) не входят в стандарт С, однако они весьма удобны 
и доступны на некоторых платформах.

   //Прототипы функций из первой группы
   double atof(const char* string);
   int atoi(const char* string);
   long atol(const char* string);
   //Вторая группа
   char* itoa(int value, char* string, int radix);
   char* ltoa(long value, char* string, int radix);

//------------------------------------------------------------------
КОНКАТЕНАЦИЯ (объединение) СТРОК
Для конкатенации следует использовать функции:
   
   char* strcat(char* dest, const char* source)
   char* strncat(char* dest, const char* source, size_t size)

Эти функции добавляют к строке, на которую указывает dest, символы из 
строки source. Первая версия добавляет все символы до 
нуль-терминатора, вторая – максимум size символов. Результирующая 
строка завершается нуль-терминатором.

